import os
from aiogram import Router, types, Bot
from aiogram.filters import CommandStart
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from asgiref.sync import sync_to_async
from shop.models import Bouquet, Customer, Order, Statistics, Consultation
from telegram_bot.staticfiles import keyboards
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import dateparser
from dotenv import load_dotenv

router = Router()
load_dotenv()
TOKEN = os.getenv("TOKEN_BOT")
bot = Bot(token=TOKEN)

class CustomOccasionState(StatesGroup):
    waiting_for_custom_occasion = State()
    waiting_for_phone = State()
    waiting_for_price = State()
    waiting_for_contact_info = State()


class OrderState(StatesGroup):
    waiting_for_name = State()
    waiting_for_address = State()
    waiting_for_delivery_time = State()
    waiting_for_phone = State()


@router.message(CommandStart())
async def start_handler(message: types.Message):
    user_name = (
        message.from_user.username
        if message.from_user.username
        else message.from_user.first_name
    )
    text = f"–ü—Ä–∏–≤–µ—Ç, {user_name} üôã‚Äç‚ôÄÔ∏è! FlowerShop –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–±—è. –ö –∫–∞–∫–æ–º—É —Å–æ–±—ã—Ç–∏—é –≥–æ—Ç–æ–≤–∏–º—Å—è? –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –ª–∏–±–æ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π"
    await message.answer(text, reply_markup=keyboards.get_occasion_keyboard())


@router.callback_query(lambda c: c.data == "occasion_other")
async def handle_other_occasion(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–≤–æ–¥:")
    await state.set_state(CustomOccasionState.waiting_for_custom_occasion)
    await callback.answer()


@router.message(CustomOccasionState.waiting_for_custom_occasion)
async def process_custom_occasion(message: types.Message, state: FSMContext):
    user_occasion = message.text
    text = f"–°–ø–∞—Å–∏–±–æ! –í—ã —É–∫–∞–∑–∞–ª–∏ –ø–æ–≤–æ–¥: *{user_occasion}* üíê"
    price_keyboard = keyboards.get_select_price()

    await message.answer(text, parse_mode="Markdown", reply_markup=price_keyboard)
    await state.set_state(CustomOccasionState.waiting_for_price)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–≤–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(occasion=user_occasion)


@router.callback_query(lambda c: c.data == "consultation")
async def request_consultation(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏ –Ω–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 20 –º–∏–Ω—É—Ç."
    )
    await state.set_state(
        CustomOccasionState.waiting_for_contact_info
    )  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    await callback.answer()


@router.message(CustomOccasionState.waiting_for_contact_info)
async def process_contact_info(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"""
    contact_info = message.text.split()

    if len(contact_info) < 2:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–º—è –ù–æ–º–µ—Ä."
        )
        return

    user_name = contact_info[0]
    user_phone = contact_info[1]

    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –º–æ–¥–µ–ª–∏ Consultation
    consultation = await sync_to_async(Consultation.objects.create)(
        customer_name=user_name,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞
        phone=user_phone,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    )

    await message.answer(
        f"üìù –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n–ò–º—è: {consultation.customer_name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {consultation.phone}"
    )
    await state.clear()


@router.message(CustomOccasionState.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone_number = message.text
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä {phone_number} –ø—Ä–∏–Ω—è—Ç. –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    )
    await state.clear()


@router.callback_query(lambda c: c.data.startswith("occasion_"))
async def handle_occasion(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–æ–≤–æ–¥–æ–≤"""
    occasion_key = callback.data.replace("occasion_", "")
    bouquets = await sync_to_async(list)(Bouquet.objects.filter(occasion=occasion_key))

    if not bouquets:
        await callback.message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –Ω–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±—É–∫–µ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª—É—á–∞—è üòî"
        )
        return

    # –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–±–æ—Ä —Å—É–º–º—ã
    await callback.message.answer(
        "–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?", reply_markup=keyboards.get_select_price()
    )
    await state.set_state(CustomOccasionState.waiting_for_price)
    await state.update_data(occasion=occasion_key)
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("price_"))
async def handle_price_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–µ–Ω—ã"""
    price_key = callback.data.replace(
        "price_", ""
    )  # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á —Ü–µ–Ω—ã –∏–∑ callback data
    price_limit = int(price_key)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ü–µ–ª–æ–µ, –µ—Å–ª–∏ —ç—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏

    # –ü–æ–ª—É—á–∞–µ–º –±—É–∫–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ü–µ–Ω–µ –∏–∑ –≤—Å–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    bouquets = await sync_to_async(list)(Bouquet.objects.filter(price__lte=price_limit))

    if not bouquets:
        await callback.message.answer(
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –±—É–∫–µ—Ç–æ–≤ –≤ —ç—Ç–æ–π —Ü–µ–Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üòî"
        )
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –±—É–∫–µ—Ç–æ–≤
    for bouquet in bouquets:
        text = (
            f"üå∏ *{bouquet.name}*\n{bouquet.description}\nüí∞ –¶–µ–Ω–∞: {bouquet.price} —Ä—É–±."
        )
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –±—É–∫–µ—Ç",
                        callback_data=f"bouquet_{bouquet.id}",
                    )
                ]
            ]
        )
        if bouquet.image:
            image_path = bouquet.image.path
            if os.path.exists(image_path):
                img_input = FSInputFile(image_path)
                await callback.message.answer_photo(
                    img_input,
                    caption=text,
                    parse_mode="Markdown",
                    reply_markup=keyboard,
                )
            else:
                await callback.message.answer(
                    f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –±—É–∫–µ—Ç–∞ '{bouquet.name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!"
                )
        else:
            await callback.message.answer(
                text, parse_mode="Markdown", reply_markup=keyboard
            )

    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("bouquet_"))
async def handle_bouquet_selection(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –±—É–∫–µ—Ç–∞"""
    bouquet_id = int(callback.data.replace("bouquet_", ""))
    try:
        bouquet = await sync_to_async(Bouquet.objects.get)(id=bouquet_id)
    except Bouquet.DoesNotExist:
        await callback.message.answer("–≠—Ç–æ—Ç –±—É–∫–µ—Ç –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω üòî")
        return

    text = f"üéâ –í—ã –≤—ã–±—Ä–∞–ª–∏ –±—É–∫–µ—Ç *{bouquet.name}*! üíê\nüí∞ –¶–µ–Ω–∞: {bouquet.price} —Ä—É–±."
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"order_{bouquet.id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üå∏ –ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data="consultation"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìö –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—é –∫–æ–ª–ª–µ–∫—Ü–∏—é", callback_data="view_collection"
                )
            ],
        ]
    )
    await callback.message.answer(text, parse_mode="Markdown", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(lambda c: c.data == "view_collection")
async def view_collection(callback: types.CallbackQuery):
    bouquets = await sync_to_async(list)(Bouquet.objects.all())
    if not bouquets:
        await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—É–∫–µ—Ç–æ–≤ üòî")
        return
    for bouquet in bouquets:
        text = (
            f"üå∏ *{bouquet.name}*\n{bouquet.description}\nüí∞ –¶–µ–Ω–∞: {bouquet.price} —Ä—É–±."
        )
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –±—É–∫–µ—Ç",
                        callback_data=f"bouquet_{bouquet.id}",
                    )
                ]
            ]
        )
        if bouquet.image:
            image_path = bouquet.image.path
            if os.path.exists(image_path):
                img_input = FSInputFile(image_path)
                await callback.message.answer_photo(
                    img_input,
                    caption=text,
                    parse_mode="Markdown",
                    reply_markup=keyboard,
                )
            else:
                await callback.message.answer(
                    f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –±—É–∫–µ—Ç–∞ {bouquet.name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!"
                )
        else:
            await callback.message.answer(
                text, parse_mode="Markdown", reply_markup=keyboard
            )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@router.callback_query(lambda c: c.data.startswith("order_"))
async def start_order(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""

    bouquet_id = int(callback.data.replace("order_", ""))

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
    user, created = await sync_to_async(Customer.objects.get_or_create)(
        tg_id=callback.from_user.id
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—É–∫–µ—Ç –≤ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    selected_bouquet = await sync_to_async(Bouquet.objects.get)(id=bouquet_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM
    await state.update_data(user_id=user.id, bouquet_id=selected_bouquet.id)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(OrderState.waiting_for_name)

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
@router.message(OrderState.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ –∑–∞–ø—Ä–æ—Å –∞–¥—Ä–µ—Å–∞"""
    await sync_to_async(Customer.objects.filter(tg_id=message.from_user.id).update)(
        name=message.text
    )

    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(OrderState.waiting_for_address)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
@router.message(OrderState.waiting_for_address)
async def process_address(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∏ –∑–∞–ø—Ä–æ—Å –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏"""
    await state.update_data(address=message.text)

    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏(–≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM):"
    )
    await state.set_state(OrderState.waiting_for_delivery_time)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
@router.message(OrderState.waiting_for_delivery_time)
async def process_delivery_time(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ –∏ –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    parsed_date = dateparser.parse(message.text, languages=["ru"])

    # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, —Ç–æ –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É
    if not parsed_date:
        await message.answer(
            "–í—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏(–≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM)"
        )
        return

    await state.update_data(delivery_time=parsed_date)

    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(OrderState.waiting_for_phone)


@router.message(OrderState.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    user_data = await state.get_data()

    user = await sync_to_async(Customer.objects.get)(id=user_data["user_id"])
    bouquet = await sync_to_async(Bouquet.objects.get)(id=user_data["bouquet_id"])

    order = await sync_to_async(Order.objects.create)(
        customer=user,
        bouquet=bouquet,
        address=user_data["address"],
        delivery_time=user_data["delivery_time"],
        status="new",
    )

    await sync_to_async(Statistics.objects.create)(
        customer_name=user,
        bouquet_name=bouquet,
        quantity=1,
    )

    await message.answer(
        f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\nüíê –ë—É–∫–µ—Ç: {bouquet.name}\nüì¶ –ê–¥—Ä–µ—Å: {user_data['address']}\nüïí –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {user_data['delivery_time']}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: {message.text}"
    )

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∫—É—Ä—å–µ—Ä–∞
    courier_chat_id = os.environ['COURIER_CHAT_ID']
    await bot.send_message(
        courier_chat_id,
        f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\nüë§ –ö–ª–∏–µ–Ω—Ç: {user.name}\nüíê –ë—É–∫–µ—Ç: {bouquet.name}\nüì¶ –ê–¥—Ä–µ—Å: {user_data['address']}\nüïí –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {user_data['delivery_time']}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: {message.text}"
    )

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    manager_chat_id = os.environ['MANAGER_CHAT_ID']
    await bot.send_message(
        manager_chat_id,
        f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\nüë§ –ö–ª–∏–µ–Ω—Ç: {user.name}\nüíê –ë—É–∫–µ—Ç: {bouquet.name}\nüì¶ –ê–¥—Ä–µ—Å: {user_data['address']}\nüïí –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {user_data['delivery_time']}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: {message.text}"
    )
    await state.clear()
